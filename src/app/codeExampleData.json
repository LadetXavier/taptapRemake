{
  "code": ["#include \"Animal.h\"\nAAnimal::AAnimal() : Super()\n{\n\tPrimaryActorTick.bCanEverTick = true;\n\tresourceStats.amount = 25;\n\tresourceStats.resourceType = EResourceType::Food;\n\tstats.characterType = ECharacterType::Animal;\n\tstats.owner = -1;\n}\nvoid AAnimal::TakeResources(int32 amount)\n{\n\tresourceStats.amount -= amount;\n}\nEResourceType AAnimal::GetType()\n{\n\treturn resourceStats.resourceType;\n}\nint32 AAnimal::GetAmount()\n{\n\treturn resourceStats.amount;\n}",
  "#include \"RTSOverseerer.h\"\n#include \"Camera/CameraComponent.h\"\n#include \"GameFramework/SpringArmComponent.h\"\n#include \"GameFramework/CharacterMovementComponent.h\"\n#include \"Engine/World.h\"\n\nARTSOverseerer::ARTSOverseerer()\n{\n \t// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.\n\tPrimaryActorTick.bCanEverTick = true;\n\n\t// Don't rotate character to camera direction\n\tbUseControllerRotationPitch = false;\n\tbUseControllerRotationYaw = false;\n\tbUseControllerRotationRoll = false;\n\n\tGetCharacterMovement()->MaxWalkSpeed = 2000;\n\n\t// Create a camera boom...\n\tCameraBoom = CreateDefaultSubobject<USpringArmComponent>(TEXT(\"CameraBoom\"));\n\tCameraBoom->SetupAttachment(RootComponent);\n\tCameraBoom->SetUsingAbsoluteRotation(true); // Don't want arm to rotate when character does\n\tCameraBoom->TargetArmLength = 3000.f;\n\tCameraBoom->SetRelativeRotation(FRotator(-60.f, 0.f, 0.f));\n\tCameraBoom->bDoCollisionTest = false; // Don't want to pull camera in when it collides with level\n\n\t// Create a camera...\n\tTopDownCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT(\"TopDownCamera\"));\n\tTopDownCameraComponent->SetupAttachment(CameraBoom, USpringArmComponent::SocketName);\n\tTopDownCameraComponent->bUsePawnControlRotation = false; // Camera does not rotate relative to arm\n\n\tFResourceStats wood;\n\twood.resourceType = EResourceType::Wood;\n\twood.amount = 50;\n\n\tresourses.Add(EResourceType::Wood, wood);\n\n\tFResourceStats gold;\n\tgold.resourceType = EResourceType::Gold;\n\tgold.amount = 50;\n\n\tresourses.Add(EResourceType::Gold, gold);\n\n\tFResourceStats stone;\n\tstone.resourceType = EResourceType::Stone;\n\tstone.amount = 50;\n\n\tresourses.Add(EResourceType::Stone, stone);\n\n\tFResourceStats food;\n\tfood.resourceType = EResourceType::Food;\n\tfood.amount = 50;\n\n\tresourses.Add(EResourceType::Food, food);\n}\n\nvoid ARTSOverseerer::AddResource(EResourceType type, int32 amount)\n{\n\tFResourceStats resource = *resourses.Find(type);\n\tresource.amount += amount;\n}\n\nvoid ARTSOverseerer::RemoveResource(EResourceType type, int32 amount)\n{\n\tFResourceStats resource = *resourses.Find(type);\n\tresource.amount -= amount;\n}\n\nint32 ARTSOverseerer::GetResource(EResourceType type)\n{\n\tFResourceStats resource = *resourses.Find(type);\n\treturn resource.amount;\n}\n\nvoid ARTSOverseerer::BeginPlay()\n{\n\tSuper::BeginPlay();\n\t\n}\n\nvoid ARTSOverseerer::Tick(float DeltaTime)\n{\n\tSuper::Tick(DeltaTime);\n\n}"
]
}



